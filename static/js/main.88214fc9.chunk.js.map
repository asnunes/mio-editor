{"version":3,"sources":["slate/components/leafs/GenericLeaf.js","slate/renders/renderLeaf.js","slate/components/elements/CodeElement.js","slate/components/elements/HeaderElement.js","slate/components/elements/DefaultElement.js","slate/renders/renderElement.js","slate/helpers/index.js","App.js","slate/plugins/withInline.js","serviceWorker.js","index.js"],"names":["GenericLeaf","props","attributes","style","getLeafStyle","leaf","children","fontWeight","bold","fontStyle","italic","fontFamily","code","textDecoration","getTextDecoration","getCodeDecoration","decorations","underline","push","strikethrough","length","join","backgroundColor","padding","renderLeaf","CodeElement","HeaderElement","DefaultElement","renderElement","element","type","MioHelpers","isMarkActive","editor","markType","Editor","nodes","match","node","universal","isLineEmpty","text","isBlockActive","blockType","toggleMark","isActive","Transforms","setNodes","Text","isText","split","toggleBlock","onKeyDown","event","Object","keys","HOTKEYS","some","key","isHotkey","onBlockHotkeyDown","onMarkHotkeyDown","preventDefaultForEventAndCall","fn","preventDefault","args","initialValue","App","useMemo","isInline","includes","withInline","withHistory","withReact","createEditor","useState","JSON","parse","localStorage","getItem","value","setValue","saveInLocalStorage","content","stringify","setItem","console","log","onChange","useCallback","autoFocus","spellCheck","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88214fc9.chunk.js","sourcesContent":["import React from 'react';\n\nexport const GenericLeaf = props => (\n  <span\n    {...props.attributes}\n    style={getLeafStyle(props.leaf)}\n  >\n    {props.children}\n  </span>\n);\n\nconst getLeafStyle = leaf => ({\n  fontWeight: leaf.bold ? 'bold' : 'normal',\n  fontStyle: leaf.italic ? 'italic' : 'normal',\n  fontFamily: leaf.code ? 'monospace' : 'normal',\n  textDecoration: getTextDecoration(leaf),\n  ...getCodeDecoration(leaf)\n});\n\nconst getTextDecoration = leaf => {\n  const decorations = [];\n  if (leaf.underline) decorations.push('underline');\n  if (leaf.strikethrough) decorations.push('line-through');\n  return decorations.length === 0 ? 'none' : decorations.join(' '); \n};\n\nconst getCodeDecoration = leaf => {\n  return leaf.code ? {\n    fontFamily: leaf.code ? 'monospace' : 'normal',\n    backgroundColor: '#eee',\n    padding: '3px',\n  } : {}\n}\n","import React from 'react';\nimport { GenericLeaf } from '../components/leafs';\n\nexport const renderLeaf = props => <GenericLeaf {...props}/>;","import React from 'react';\n\nexport const CodeElement = props => (\n  <pre {...props.attributes}>\n    <code>{props.children}</code>\n  </pre>\n);\n","import React from 'react';\n\nexport const HeaderElement = props => <h2 {...props.attributes}>{props.children}</h2>;","import React from 'react';\n\nexport const DefaultElement = props => (\n  <p {...props.attributes}>{props.children}</p>\n);\n\n","import React from 'react';\nimport { CodeElement, DefaultElement, HeaderElement } from '../components/elements';\n\nexport const renderElement = props => {\n  switch(props.element.type) {\n    case 'header':\n      return <HeaderElement {...props}/>;\n    case 'code':\n      return <CodeElement {...props}/>;\n    default:\n      return <DefaultElement {...props}/>;\n  }\n};\n\n","import { Editor, Transforms, Text } from \"slate\";\nimport isHotkey from 'is-hotkey';\n\nexport const MioHelpers = {\n  isMarkActive(editor, markType) {\n    const [match] = Editor.nodes(editor, {\n      match: node => node[markType] === true,\n      universal: true,\n    });\n\n    return !!match;\n  },\n  isLineEmpty(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: node => node.text === '',\n    });\n\n    return !!match;\n  },\n  isBlockActive(editor, blockType) {\n    const [match] = Editor.nodes(editor, {\n      match: node => node.type === blockType,\n    });\n    return !!match;\n  },\n  toggleMark(editor, markType) {\n    const isActive = MioHelpers.isMarkActive(editor, markType);\n    Transforms.setNodes(\n      editor,\n      { [markType]: isActive ? null : true },\n      { match: node => Text.isText(node), split: true}\n      );\n  },\n  toggleBlock(editor, blockType) {\n    const isActive = MioHelpers.isBlockActive(editor, blockType);\n    Transforms.setNodes(\n      editor,\n      { type: isActive ? null : blockType },\n      );\n  },\n  onKeyDown(event, editor) {\n    Object.keys(HOTKEYS).some(key => {\n      if (isHotkey(key, event)) {\n        HOTKEYS[key](event, editor);\n        return true;\n      }\n    });\n  }\n};\n\nconst HOTKEYS = {\n  \"mod+h\": (event, editor) => onBlockHotkeyDown(event, editor, \"header\"),\n  \"mod+c\": (event, editor) => onMarkHotkeyDown(event, editor, \"code\"),\n  \"mod+b\": (event, editor) => onMarkHotkeyDown(event, editor, \"bold\"),\n  \"mod+s\": (event, editor) => onMarkHotkeyDown(event, editor, \"strikethrough\"),\n  \"mod+i\": (event, editor) => onMarkHotkeyDown(event, editor, \"italic\"),\n  \"mod+u\": (event, editor) => onMarkHotkeyDown(event, editor, \"underline\"),\n};\n\nconst onBlockHotkeyDown = (event, editor, blockType) => {\n  preventDefaultForEventAndCall(event, MioHelpers.toggleBlock, editor, blockType);\n};\n\nconst onMarkHotkeyDown = (event, editor, markType) => {\n  preventDefaultForEventAndCall(event, MioHelpers.toggleMark, editor, markType);\n};\n\nconst preventDefaultForEventAndCall = (event, fn, ...args) => {\n  event.preventDefault();\n  fn(...args);\n};","import React, { useMemo, useState, useCallback } from 'react';\nimport { createEditor } from 'slate';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { withHistory } from 'slate-history';\n\nimport { renderLeaf, renderElement } from './slate/renders';\nimport { MioHelpers } from './slate/helpers';\nimport { withInline } from './slate/plugins';\n\nimport './App.css';\n\nconst App = () => {\n  const editor = useMemo(() => withInline(withHistory(withReact(createEditor()))), []);\n  const [value, setValue] = useState(JSON.parse(localStorage.getItem('content')) || initialValue);\n\n  const onValueChange = value => {\n    setValue(value);\n    saveInLocalStorage(value);\n  }\n\n  const saveInLocalStorage = value => {\n    const content = JSON.stringify(value);\n    localStorage.setItem('content', content);\n    console.log(content);\n  }\n  \n  return (\n    <Slate editor={editor} value={value} onChange={onValueChange}>\n      <Editable \n        renderLeaf={useCallback(renderLeaf)}\n        renderElement={useCallback(renderElement)}\n        onKeyDown={event => MioHelpers.onKeyDown(event, editor)}\n        autoFocus\n        spellCheck\n      />\n    </Slate>\n  );\n};\n\nconst initialValue = [\n  {\n    type: 'paragraph',\n    children: [{ text: 'A line of a paragraph...'}],\n  },\n]\n\nexport default App;\n\n","export const withInline = editor => {\n  editor.isInline = element => {\n    return [\"code\"].includes(element.type);\n  }\n\n  return editor;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}