{"version":3,"sources":["components/slate/Leaf.js","App.js","serviceWorker.js","index.js"],"names":["getLeafStyle","leaf","fontWeight","bold","fontStyle","italic","textDecoration","getTextDecoration","decorations","underline","push","strikethrough","length","join","Leaf","props","attributes","style","children","initialValue","type","text","App","editor","useMemo","withReact","createEditor","useState","JSON","parse","localStorage","getItem","value","setValue","saveInLocalStorage","content","stringify","setItem","console","log","renderLeaf","useCallback","onChange","onKeyDown","event","ctrlKey","key","preventDefault","Editor","setNodes","match","split","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAWMA,EAAe,SAAAC,GAAI,MAAK,CAC5BC,WAAYD,EAAKE,KAAO,OAAS,SACjCC,UAAWH,EAAKI,OAAS,SAAW,SACpCC,eAAgBC,EAAkBN,KAG9BM,EAAoB,SAAAN,GACxB,IAAMO,EAAc,GAGpB,OAFIP,EAAKQ,WAAWD,EAAYE,KAAK,aACjCT,EAAKU,eAAeH,EAAYE,KAAK,gBACX,IAAvBF,EAAYI,OAAe,SAAWJ,EAAYK,KAAK,MAGjDC,EAtBF,SAAAC,GAAK,OAChB,0CACMA,EAAMC,WADZ,CAEEC,MAAOjB,EAAae,EAAMd,QAEzBc,EAAMG,WCgELC,G,MAAe,CACnB,CACEC,KAAM,YACNF,SAAU,CAAC,CAAEG,KAAM,gCAIRC,EAtEH,WACV,IAAMC,EAASC,mBAAQ,kBAAMC,YAAUC,iBAAiB,IADxC,EAEUC,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,aAAeZ,GAFlE,mBAETa,EAFS,KAEFC,EAFE,KASVC,EAAqB,SAAAF,GACzB,IAAMG,EAAUP,KAAKQ,UAAUJ,GAC/BF,aAAaO,QAAQ,UAAWF,GAChCG,QAAQC,IAAIJ,IAGRK,EAAaC,uBAAY,SAAA1B,GAAK,OAAI,kBAAC,EAASA,KAAU,IAE5D,OACE,kBAAC,IAAD,CAAOQ,OAAQA,EAAQS,MAAOA,EAAOU,SAdjB,SAAAV,GACpBC,EAASD,GACTE,EAAmBF,KAajB,kBAAC,IAAD,CACEQ,WAAYA,EACZG,UAAW,SAAAC,GACT,GAAKA,EAAMC,QAEX,OAAQD,EAAME,KACZ,IAAK,IACHF,EAAMG,iBACNC,IAAOC,SACL1B,EACA,CAAEpB,MAAM,GACR,CAAE+C,MAAO,OAAQC,OAAO,IAE1B,MACF,IAAK,IACHP,EAAMG,iBACNC,IAAOC,SACL1B,EACA,CAAEZ,eAAe,GACjB,CAAEuC,MAAO,OAAQC,OAAO,IAE1B,MACF,IAAK,IACHP,EAAMG,iBACNC,IAAOC,SACL1B,EACA,CAAElB,QAAQ,GACV,CAAE6C,MAAO,OAAQC,OAAO,IAE1B,MACF,IAAK,IACHP,EAAMG,iBACNC,IAAOC,SACL1B,EACA,CAAEd,WAAW,GACb,CAAEyC,MAAO,OAAQC,OAAO,UClDpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCZNM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb155b86.chunk.js","sourcesContent":["import React from 'react';\n\nconst Leaf = props => (\n  <span\n    {...props.attributes}\n    style={getLeafStyle(props.leaf)}\n  >\n    {props.children}\n  </span>\n);\n\nconst getLeafStyle = leaf => ({\n  fontWeight: leaf.bold ? 'bold' : 'normal',\n  fontStyle: leaf.italic ? 'italic' : 'normal',\n  textDecoration: getTextDecoration(leaf),\n});\n\nconst getTextDecoration = leaf => {\n  const decorations = [];\n  if (leaf.underline) decorations.push('underline');\n  if (leaf.strikethrough) decorations.push('line-through');\n  return decorations.length === 0 ? 'normal' : decorations.join(' '); \n};\n\nexport default Leaf;","import React, { useMemo, useState, useCallback } from 'react';\nimport { createEditor, Editor } from 'slate';\nimport { Slate, Editable, withReact } from 'slate-react';\n\nimport Leaf from './components/slate/Leaf';\n\nimport './App.css';\n\nconst App = () => {\n  const editor = useMemo(() => withReact(createEditor()), []);\n  const [value, setValue] = useState(JSON.parse(localStorage.getItem('content')) || initialValue);\n\n  const onValueChange = value => {\n    setValue(value);\n    saveInLocalStorage(value);\n  }\n\n  const saveInLocalStorage = value => {\n    const content = JSON.stringify(value);\n    localStorage.setItem('content', content);\n    console.log(content);\n  }\n\n  const renderLeaf = useCallback(props => <Leaf {...props}/>, []);\n  \n  return (\n    <Slate editor={editor} value={value} onChange={onValueChange}>\n      <Editable \n        renderLeaf={renderLeaf}\n        onKeyDown={event => {\n          if (!event.ctrlKey) return;\n\n          switch (event.key) {\n            case 'b':\n              event.preventDefault();\n              Editor.setNodes(\n                editor,\n                { bold: true },\n                { match: 'text', split: true },\n              );\n              break;\n            case 's':\n              event.preventDefault();\n              Editor.setNodes(\n                editor,\n                { strikethrough: true },\n                { match: 'text', split: true },\n              );\n              break;\n            case 'i':\n              event.preventDefault();\n              Editor.setNodes(\n                editor,\n                { italic: true },\n                { match: 'text', split: true },\n              );\n              break;\n            case 'u':\n              event.preventDefault();\n              Editor.setNodes(\n                editor,\n                { underline: true },\n                { match: 'text', split: true }\n              )\n          };\n        }}\n      />\n    </Slate>\n  );\n};\n\nconst initialValue = [\n  {\n    type: 'paragraph',\n    children: [{ text: 'A line of a paragraph...'}],\n  },\n]\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}